
    // Make a vector of star objects
    // unsigned int amount = 0;
    // std::vector<glm::vec3> stars; 

    // Shader starShader("/home/hiatus/Documents/OPENGLPROJECT/BetterShaders/src/shaders/vertInstanced.vs", "/home/hiatus/Documents/OPENGLPROJECT/BetterShaders/src/shaders/fragInstanced.fs");

    // for (int i = 0; i < 50; i++)
    // {
    //     for(int j = 0; j < 100; j++){
    //         for(int k = 0; k < 100; k++){
    //             amount++; 
    //             glm::vec3 position; 
    //             position.x = i;// + rand()%300;
    //             position.y = j;//  + rand()%300;
    //             position.z = k;// + rand()%300;
    //             stars.push_back(position); 
    //         }
    //     }
    // }

    // unsigned int VBO; 
    // unsigned int VAO; 
    // unsigned int instanceVBO; 

    // glGenBuffers(1, &instanceVBO); 
    // glBindBuffer(GL_ARRAY_BUFFER, instanceVBO); 
    // glBufferData(GL_ARRAY_BUFFER, sizeof(glm::vec3) * stars.size(), stars.data(), GL_STATIC_DRAW); 
    // glBindBuffer(GL_ARRAY_BUFFER, 0); 

    // glGenBuffers(1, &VBO);
    // glGenVertexArrays(1, &VAO); // Generate 1

    // glBindVertexArray(VAO);
    // glBindBuffer(GL_ARRAY_BUFFER, VBO);
    // glBufferData(GL_ARRAY_BUFFER, sizeof(float) * starVertices.size(), starVertices.data(), GL_STATIC_DRAW);

    // glEnableVertexAttribArray(0);
    // glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);

    // glEnableVertexAttribArray(1);  
    // glBindBuffer(GL_ARRAY_BUFFER, instanceVBO); 
    // glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0); 
    // glVertexAttribDivisor(1, 1); 

        StarChunk *localChunks[7]; 
    localChunks[0] = new StarChunk(0,0,0);   // 0,0 
    localChunks[1] = new StarChunk(0,0,0);   // +x  
    localChunks[2] = new StarChunk(0,0,0);   // -x  
    localChunks[3] = new StarChunk(0,0,0);   // +z  
    localChunks[4] = new StarChunk(0,0,0);   // -z  
    localChunks[5] = new StarChunk(0,0,0);   // +y  
    localChunks[6] = new StarChunk(0,0,0);   // -y  
    for(int i = 0; i < 7; i++){
        localChunks[i]->init(glm::vec3(0.0f, 0.0f, 0.0f)); 
    }


            // Calculate Player chunk coord difference 
        playerChunkCoords.x = floor(player.position.x / CHUNK_SIZE); 
        playerChunkCoords.y = floor(player.position.y / CHUNK_SIZE); 
        playerChunkCoords.z = floor(player.position.z / CHUNK_SIZE); 

        if (playerChunkCoords.x - lastPlayerChunkCoords.x != 0 || playerChunkCoords.z != lastPlayerChunkCoords.z || playerChunkCoords.y != lastPlayerChunkCoords.y){
            // We changed position between frames make new StarChunk 
            // chunk->init(playerChunkCoords); 
            localChunks[0]->init(playerChunkCoords + glm::vec3{0.0, 0.0, 0.0}); 
            localChunks[1]->init(playerChunkCoords + glm::vec3{1.0, 0.0, 0.0});  
            localChunks[2]->init(playerChunkCoords + glm::vec3{-1.0, 0.0, 0.0});  
            localChunks[3]->init(playerChunkCoords + glm::vec3{0.0, 0.0, 1.0});  
            localChunks[4]->init(playerChunkCoords + glm::vec3{0.0, 0.0, -1.0});  
            localChunks[5]->init(playerChunkCoords + glm::vec3{0.0, 1.0, 0.0});  
            localChunks[6]->init(playerChunkCoords + glm::vec3{0.0, -1.0, 0.0});  
        }




RANDOM TEXTURE DRAWING CODE TO BE USED FOR UI IN THE FUTURE!
`        // object.matrixTransform(glm::rotate(object.model, glm::radians(1.001f), glm::vec3(0.0f, 0.0f, 1.0f)));
        // object.matrixTransform(glm::rotate(object.model, glm::radians(3.001f), glm::vec3(0.0f, 1.0f, 0.0f)));
        // object.render(camera.getViewMatrix(), camera.getProjectionMatrix(), GL_LINES);
        // glBindVertexArray(0); 

        // texture.transform = glm::rotate(texture.transform, glm::radians(10.0f), glm::vec3(1.0f, 2.5f, 0.0f));
        // texture.render()